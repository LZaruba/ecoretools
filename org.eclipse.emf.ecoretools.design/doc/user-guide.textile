h1. Ecore Designer User Guide

h2(#overview). Overview

The __Viewpoint Ecore Modeler__ provides several representations organized in different viewpoints which can be used to create, view and edit Ecore models. It also provides a good example of a realistic use of the Viewpoint technology. This guide is targeted to end users, but Viewpoint specifiers can study the source of the __Viewpoint Ecore Modeler__ to see how many of the features of Viewpoint are used in practice.

The viewpoints available are:
* "Design":#design is the main viewpoint which can be used to create and edit Ecore models. It provides both a graphical representation of Ecore models (similar to a UML class diagram) and a tabular (spreadsheet-like) representation of the same models.
* "Archetype":#archetype extends the main diagram from the __Design__ viewpoint to add support for "modeling in color with archetypes":http://en.wikipedia.org/w/index.php?title=UML_colors&oldid=381749673.
* "Documentation":#documentation extends the main diagram from the __Design__  viewpoint to add support for documentation annotations.
* "Quality":#quality provides several graphical representations of Ecore models which can be used to assess their quality, for example by analyzing the dependencies between different packages.
* "Review":#review provides a tabular editor to document models for review.
* "Generation":#generation provides support for customizing some of the EMF Generation properties of a model.

The following sections provide more details on each viewpoint.

h2(#design). The Design Viewpoint

This viewpoint provides two main representations: *Entities* and *Classes*. 

h3(#design.entities). The Entities Diagram

*Entities* provides a class diagram-like graphical representation of an Ecore model. It is the main graphical representation to create, visualize and edit Ecore models. The figure below shows an example diagram:  

!images/example_design_entities.png!

Entities diagram are created on Ecore packages, and show all the contents of that package. If the *Package* optional layer is enabled (which it is by default), the sub-packages and their content is also visible. The optional layer *Dynamic* adds a tool in the palette to create a dynamic instance of an EClass defined in your model, without requiring EMF code generation.

The palette provides all the tools required to:
* create new classes, data types and enumerations (section __Classifier__),
* populate them with attributes, operations and literal values (section __Feature__),
* create relationships between your concepts (section __Relation__). 

When keeping the mouse on a selected element, a popup will appear with modeling assistants (shortcut icons) for all the tools which can be applied on the selected element. For example in the figure below, an EClass is selected, and shortcuts are available to create new EOperation and new EAttributes in that class without going back to the palette:

!images/modeling_assistant.png!

To delete an element, simply select it on the diagram and hit the __Delete__ key, or invoke the __Delete from model__ action from the context menu or the diagram's toolbar.

Packages, classifiers, and features can be moved into a different parent (package or classifier, depending on the case), by simple drag'n'drop. The source and target elements of all the relations can also be modified by dragging the extremity of the corresponding edge to the new source or target element.

Direct edit of all the elements labels is supported, to quickly rename the element and, in some cases, other properties beside the name:
* *Direct Edit on EAttributes*: the label of an EAttribute indicates the name, type and default value (if specified). If the attribute is derived, the name is prefixed by a "/". For example: @/myDerivedAttribute : EString = "default"@. When editing an attribute's label, each of these can be controlled. For example, entering @myNewName : EInt@ will change the name of the attribute, set it non-derived (as the new name does not start with a "/") and change the type to @EInt@. The default value will not be modified as it is not mentioned in the text entered. Similarly, entering @myNewName = 42@ will change the default value but not the type, which is not specified. There are also shortcuts that allow you to edit quicker the attribute's label to your need. For example:
** entering @newName@ will simply rename the method but keep its parameters and return type;
** entering @: EInt@ will simply rename the return type;
** entering @= 42@ will simply change the default value;
** then you can change two or all the parts of the attribute's label, e.g entering @newName = 47@ will change the name and the value but not the type or <code>newName:EInt=105</code>will change the entire label.
* *Direct Edit on EOperations*: the label of an EOperation indicates the operation's name, parameters (name and type), and return value. For example: @m(a A, b B) : EBoolean@. Each part (name, parameters and type) can be modified through direct edit. If a part is not mentioned in the edit string, it will not be modified. Using the previous example, @m2@ would simply rename the method but keep its parameters and return type, @:EInt@ would just change the type, and @m()@ would keep the same name and return type but remove all the parameters. When specifying parameters, they must be separated by a comma (@,@). The type of a parameter is optional; if specified, it can be separated from the name by a colon (@:@), although this is not required.
* *Direct Edit on EReferences*: the label of an EReference indicates its name, cardinality and whether it is derived or not. For example: @[0..*] /ref@ denotes a derived reference named @ref@ which can point to any number of elements (including zero). When editing the label, it is possible to specify only the name and derived attribute (e.g. @renamedRef@), only the cardinality (e.g. @[1..1]@) or both (e.g. @[0..1] ref2@). Three special strings are also support to make some common operations quicker:
** the edit strings @0@ and @1@ only changes the lower bound of the cardinality of the reference, to 0 or 1;
** the edit string @*@ only changes the upper bound of the cardinality of the reference, to -1 (meaning "unbounded").

These direct edit features are provided as convenience for common tasks. For more complex customization of the other properties of an element, you can always access all their properties in the __Semantic__ section of the __Properties__ view when the element is selected.

h4(#design.entities.blank). Support for unsynchronized Entities diagrams.

By default, Entities diagrams are in *synchronized* mode, which means the graphical elements visible on the diagram always include all the elements in the corresponding package. Sometimes you want a diagram to show only a subset of these elements, for example when documenting a particular aspect of the model while ignoring the rest. In addition to explicitly hiding some elements in the diagram, it is also possible to switch the diagram in *unsynchronized* mode from the context menu on the diagram's background. In this mode, it becomes possible to remove the graphical representations of some of the model elements without affecting the underlying model by using the __Delete from diagram__ action. Be aware that if you have an existing diagram in __unsynchronized__ mode and you add new elements in the model from outside this diagram (from another diagram or table for example), the new elements will not appear  automatically on the unsynchronized diagram.

h3(#entities.classes). The Classes Table Editor

This representation provides a tabular editor for all the classes in an Ecore model and their structural features (attributes and references):

!images/example_design_classes.png!

The left column shows the list of classes and their structural features in the current package in a tree. If the package contains sub-packages, they are also shown with their content, recursively.

The __Name__ column can be used to edit the name of a package, class or feature. To see and edit other properties of an element, simply select the corresponding line and use the __Properties__ view to access all the properties of the element. 

h2(#archetype). The Archetype Viewpoint

When the __Archetype__ viewpoint is enabled, a new optional layer named __Archetypes__ is available in the main __Entities__ graphical modeler, which adds support for "modeling in color with archetypes":http://en.wikipedia.org/w/index.php?title=UML_colors&oldid=381749673.

Concretely, when the layer is enabled, four new tools become available in the palette, as shown in the figure below: 

!images/archetypes.png!

These tools can be used to create new EClasses with special annotations indicating they represent some particular kind of elements. Each of the four kinds of archetypes supported are represented by a different color. As shown on the figure, the tools can also be used on already existing EClasses to set or change their categorization.

Inside the model, the archetypes are encoded as EAnnotations added to the EClass, with a source of @http://www.obeo.fr/dsl/dnc/archetype@ and a single details entry. The key of the entry is @archetype@, and the value can be one of (descriptions taken from the Wikipedia page):
* @MomentInterval@: represents a moment or interval of time; displayed in pink.
* @Description@: a catalog-like description which classifies or 'labels' an object; displayed in blue.
* @Role@: represents a way of participating in an activity (by either a person, place, or thing); displayed in yellow.
* @Thing@: represents something tangible, uniquely identifiable; displayed in green.

h2(#documentation). The Documentation Viewpoint

When the __Documentation__ viewpoint is enabled, a new optional layer named __Documentation__ is available (and enabled by default). This layer adds two new tools to the palette in the __Documentation__ section:
* __Doc Annotation__ can be used to create a note on the diagram in which free-form documentation can be typed. They are represented graphically by green rectangles.
* __Doc Assignment__ can be used to assign a documentation note created by __Doc Annotation__ to a class on the diagram. The assignment is represented by a green arrow from the note to the class.

In addition, the __Documentation__ layer customizes the representation of classes so that classes which do not have any documentation assigned to them are drawn with a bright red border to stand out and be identified easily.

The figure below illustrates these features:

!images/documentation_layer.png!

Technically, the documentation annotations are stored in a way compatible with EMF's documentation capabilities: the annotation has a source of @http://www.eclipse.org/emf/2002/GenModel@ and the documentation string itself is stored in a details entry with key @documentation@.

h2(#quality). The Quality Viewpoint

The __Quality__ viewpoint provides three types of diagrams and a new optional layer for the __Entities__ diagram which can be used to assess the quality of a model based on different metrics.

h3(#quality.dependencies). Dependencies Diagram

__Dependencies__ diagrams can be created on __EPackages__. They show the target package itself and all the other packages it depends on through its contents. For example, if an EClass in the target package has a reference whose type is defined in another one, an edge will be visible between the packages to represent their dependency.

The figure below shows an __Entities__ diagram on a sample Ecore model on the left, and the corresponding __Dependencies__ diagram for the @bank@ package on the right. The package which is analyzed is shown in yellow, and the other packages (its dependencies) in orange. A red arrow from package to another indicates a dependency.

!images/dependencies.png!

The optional layer __Content__ (disabled by default) can be enable to show the classifiers which are defined inside each of the packages.

h3(#quality.relations). Relations Diagram

__Relations__ diagrams are similar in intent to __Dependencies__ diagram, but on the level of EClasses instead of packages. They are created on an EClass (say __A__), which is represented on the diagram. Two optional layers (disabled by default) are available to make visible on the diagram either the classes on which __A__ depends or which depend on __A__, with connections representing the direction of the dependency. A class __A__ is considered depending on another class __B__ either if __B__ is a direct supertype of __A__ or if __A__ has an EReference of type __B__.

The figure below illustrates a __Relations__ diagram on the class __User__ defined in the sample model already used for the __Dependencies__ diagram. Here, both optional layers are enabled, so we see both classes which depend on __User__ (here __Account__) and classes on which __User__ depends (__Date__ and __Address__).

!images/relations.png!

h3(#quality.hierarchy). Hierarchy Diagram

__Hierarchy__ diagrams can be created on an EClass, and represent both the class itself and all its direct and indirect super-types. 

The figure below shows a sample metamodel for a filesystem on the left, and on the right a __Hierarchy__ diagram on the @Spreadsheet@ class (shown in bold), which show all its direct and indirect super-types.

!images/hierarchy.png!

h3(#quality.size). Size Layer

The __Quality__ viewpoint also extends the __Entities__ diagram with a new optional layer named __Size__ (disabled by default). When enabled, it changes the color of the EClasses on the diagram to shades of green, based on the size of the EClass (i.e. the number of features it contains). The more features a class contains, the more complex it is considered and the darker it is represented. 

The figure below shows a subset of the filestystem metamodel used above, with the __Size__ layer enabled:

!images/size.png!

We can see that the classes have a different color depending on how much features they contain. Small classes are bright green, classes with a few features are a darker shade of green, and very big classes which probably define too many features are shown in red.

h2(#review). The Review Viewpoint

The __Review__ viewpoint provides a table which can be used to review and document a model.

h3(#review.documentation). The Documentation Table

The __Documentation__ table (created on an __EPackage__) can be used to review and edit the documentation annotations associated with the EClasses of a package and their features. See the example below:

!images/documentation_table.png!

h2(#generation). The Generation Viewpoint

The __Generation__ viewpoint provides a table to edit the generation configuration associated to an Ecore model. Note that it can be enabled only if the @genmodel@ associated to the @ecore@ resource is loaded as a semantic resource inside the session.

h3(#generation.genpackage). The GenPackage Attributes Table

This table is used to edit some of the generation configuration associated to an Ecore model. To use it, you must have initialized the @genmodel@ corresponding to the Ecore model and added it as a semantic resource in the session. Then you can create a new __GenPackage Attributes__ table on the top-level __GenPackage__ element.

For each structural feature of each type in a package (and its sub-packages), the table shows two columns, "Category" and "Description", which correspond to the category in which to put the feature's property descriptor, and the description to use for that descriptor. These informations are stored in the @genmodel@ and used by EMF to organize the properties of model elements into logical categories in the property sheets it generates.

!images/genpackage_table.png!
