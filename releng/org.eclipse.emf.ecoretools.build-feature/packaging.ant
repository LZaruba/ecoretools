<?xml version="1.0" encoding="UTF-8"?>
<project name="Packaging">
	<target name="create.target.platform.metadata">
		<buckminster.targetPlatformLocation property="target.platform.location" />
		<property name="target.platform.repository" value="file:/${sp:output}" />
		<p2.publish.featuresAndBundles metadataRepository="${target.platform.repository}" source="${target.platform.location}" publishArtifacts="false" />
		<buckminster.publishJRE metadataRepository="${target.platform.repository}" publishArtifacts="false" />
	</target>

	<target name="-define.package.qualifier">
		<property name="incubation.qualifier" value="" />

		<!-- if the build.alias is non-empty then use it in preference -->
		<condition property="package.qualifier" value="${incubation.qualifier}-${build.alias}">
			<and>
				<isset property="build.alias" />
				<length string="${build.alias}" when="greater" length="0" />
			</and>
		</condition>
		<!-- otherwise use the build.id if defined, if not then fall back to an empty string -->
		<condition property="package.qualifier" value="${incubation.qualifier}-${build.id}" else="${incubation.qualifier}">
			<and>
				<isset property="build.id" />
				<length string="${build.id}" when="greater" length="0" />
			</and>
		</condition>
	</target>

	<target name="package.site" depends="-define.package.qualifier">
		<mkdir dir="${sp:output}" />

		<!-- create the desired ZIP file -->
		<zip basedir="${sp:repository}" destfile="${sp:output}/${package.name}${package.qualifier}.zip" />
	</target>

	<target name="-locate.launcher.jar" unless="launcher.jar">
		<pathconvert property="launcher.jar">
			<first count="1">
				<sort>
					<fileset dir="${eclipse.home}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
					<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
						<date />
					</reverse>
				</sort>
			</first>
		</pathconvert>
	</target>

	<target name="-define.common.properties" depends="-locate.launcher.jar">
		<buckminster.targetPlatformLocation property="target.platform.location" />

		<!--
			Set the target platform bundle pool path to an empty value in case installation
			of the target platform components is desired, otherwise set it to the target
			platform location.
			The target platform bundle pool path is used as a secondary bundle pool during
			the installations. So if set to the location of the target platform, then all
			components in the target platform appear to be already installed to the installation
			process, and thus are not installed again. On the other hand if set to an empty
			value then the components from the target platform don't appear to be installed,
			and thus are installed along with the components produced by the build. 
		-->
		<condition property="target.platform.bundle.pool.path" value="">
			<istrue value="${install.target.platform.dependencies}" />
		</condition>
		<property name="target.platform.bundle.pool.path" location="${target.platform.location}" />

		<property name="bundle.pools.property.name" value="org.eclipse.equinox.p2.cache.extensions" />
		<property name="install.features.property.name" value="org.eclipse.update.install.features" />

		<property name="install.features" value="true" />

		<!-- default to empty values -->
		<property name="fs:repository" value="" />
		<property name="fs:target.platform.repository" value="" />
		<property name="fs:prerequisite.repositories" value="" />
		<property name="fs:prerequisite.metadata.repositories" value="" />
		<property name="fs:prerequisite.artifact.repositories" value="" />

		<!-- create a list of all possible metadata repositories -->
		<pathconvert property="metadata.repositories" dirsep="/" pathsep=",">
			<buckminster.valuepath value="${fs:repository}" />
			<buckminster.valuepath value="${fs:target.platform.repository}" />
			<buckminster.valuepath value="${fs:prerequisite.repositories}" />
			<buckminster.valuepath value="${fs:prerequisite.metadata.repositories}" />
			<map from="" to="file:/" />
		</pathconvert>

		<!-- create a list of all possible artifact repositories -->
		<pathconvert property="artifact.repositories" dirsep="/" pathsep=",">
			<buckminster.valuepath value="${fs:repository}" />
			<path location="${target.platform.location}" />
			<buckminster.valuepath value="${fs:prerequisite.repositories}" />
			<buckminster.valuepath value="${fs:prerequisite.artifact.repositories}" />
			<map from="" to="file:/" />
		</pathconvert>

		<condition property="wildcard" value="&quot;*&quot;" else="*">
			<os family="windows" />
		</condition>
	</target>

	<!--
		install the specified prerequisite IUs (which are not meant to be included
		in the final install) in a separate directory
	-->
	<target name="-install.prerequisite.ius" depends="-define.common.properties" if="prerequisite.ius">
		<!-- default to an empty value if not set -->
		<property name="sp:prerequisites.base" value="" />

		<pathconvert property="bundle.pools.for.prerequisites" dirsep="/" pathsep="|" setonempty="false">
			<path path="${target.platform.bundle.pool.path}" />
			<path path="${sp:prerequisites.base}" />
			<map from="" to="file:/" />
		</pathconvert>

		<pathconvert property="bundle.pools.for.install" dirsep="/" pathsep="|" setonempty="false">
			<path path="${target.platform.bundle.pool.path}" />
			<path path="${prerequisites.destination}" />
			<map from="" to="file:/" />
		</pathconvert>

		<condition property="prerequisites.profile.properties" value="${bundle.pools.property.name}=${bundle.pools.for.prerequisites},${install.features.property.name}=${install.features}" else="${install.features.property.name}=${install.features}">
			<isset property="bundle.pools.for.prerequisites" />
		</condition>

		<delete dir="${prerequisites.destination}" />

		<java jar="${launcher.jar}" fork="true" failonerror="true">
			<arg value="-consolelog" />
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-metadataRepository" />
			<arg value="${metadata.repositories}" />
			<arg value="-artifactRepository" />
			<arg value="${artifact.repositories}" />
			<arg value="-destination" />
			<arg value="${prerequisites.destination}" />
			<arg value="-profile" />
			<arg value="Prerequisites" />
			<arg value="-profileproperties" />
			<arg value="${prerequisites.profile.properties}" />
			<arg value="-installIU" />
			<arg value="${prerequisite.ius}" />
			<arg value="-p2.os" />
			<arg value="${wildcard}" />
			<arg value="-p2.ws" />
			<arg value="${wildcard}" />
			<arg value="-p2.arch" />
			<arg value="${wildcard}" />
		</java>

		<!--
			remove the p2 metadata, as the prerequisites install location is only meant
			to be used as a secondary bundle pool during the install of the required IUs
		-->
		<delete dir="${prerequisites.destination}" includeEmptyDirs="true">
			<include name="p2/**" />
		</delete>
	</target>

	<!--
		install the required IUs, potentially referencing the target platform and/or the prerequisite
		install location as secondary bundle pools so that only the desired components are installed
		in the install destination directory
	-->
	<target name="-install.content.ius" depends="-install.prerequisite.ius">
		<!-- this may have already been defined in the -install.prerequisite.ius target (if it ran) -->
		<pathconvert property="bundle.pools.for.install" dirsep="/" pathsep="|" setonempty="false">
			<path path="${target.platform.bundle.pool.path}" />
			<map from="" to="file:/" />
		</pathconvert>

		<condition property="install.profile.properties" value="${bundle.pools.property.name}=${bundle.pools.for.install},${install.features.property.name}=${install.features}" else="${install.features.property.name}=${install.features}">
			<isset property="bundle.pools.for.install" />
		</condition>

		<delete dir="${install.destination}" />

		<java jar="${launcher.jar}" fork="true" failonerror="true">
			<arg value="-consolelog" />
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-metadataRepository" />
			<arg value="${metadata.repositories}" />
			<arg value="-artifactRepository" />
			<arg value="${artifact.repositories}" />
			<arg value="-destination" />
			<arg value="${install.destination}" />
			<arg value="-profile" />
			<arg value="Install" />
			<arg value="-profileproperties" />
			<arg value="${install.profile.properties}" />
			<arg value="-installIU" />
			<arg value="${content.ius}" />
			<arg value="-p2.os" />
			<arg value="${wildcard}" />
			<arg value="-p2.ws" />
			<arg value="${wildcard}" />
			<arg value="-p2.arch" />
			<arg value="${wildcard}" />
		</java>

		<!-- remove the p2 metadata, so that the installation of target platform IUs is not confused -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="p2/**" />
		</delete>
	</target>

	<!--
		install the specified TP IUs
	-->
	<target name="-install.ius" depends="-install.content.ius" if="target.platform.ius">
		<java jar="${launcher.jar}" fork="true" failonerror="true">
			<arg value="-consolelog" />
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-metadataRepository" />
			<arg value="${metadata.repositories}" />
			<arg value="-artifactRepository" />
			<arg value="${artifact.repositories}" />
			<arg value="-destination" />
			<arg value="${install.destination}" />
			<arg value="-profile" />
			<arg value="Install" />
			<arg value="-profileproperties" />
			<arg value="${install.features.property.name}=${install.features}" />
			<arg value="-installIU" />
			<arg value="${target.platform.ius}" />
			<arg value="-p2.os" />
			<arg value="${wildcard}" />
			<arg value="-p2.ws" />
			<arg value="${wildcard}" />
			<arg value="-p2.arch" />
			<arg value="${wildcard}" />
		</java>

		<!-- remove the p2 metadata, as they will never be used -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="p2/**" />
		</delete>
	</target>

	<target name="-define.properties.for.installation">
		<property name="install.destination" location="${sp:output}" />

		<property name="prerequisites.destination" location="${install.destination}-prerequisites" />
	</target>

	<target name="install.ius" depends="-define.properties.for.installation,-install.ius">
		<!-- cleanup -->
		<delete dir="${prerequisites.destination}" />
	</target>

	<target name="-define.properties.for.packaging">
		<property name="temp.directory" location="${sp:output}/${package.name}-temp" />

		<property name="install.directory.name" value="eclipse" />
		<property name="install.destination" location="${temp.directory}/${install.directory.name}" />

		<property name="prerequisites.destination" location="${temp.directory}/prerequisites" />
	</target>

	<target name="package.ius" depends="-define.properties.for.packaging,-install.ius,-define.package.qualifier">
		<!-- remove the p2 metadata, as they will never be used -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="artifacts.xml" />
		</delete>

		<!-- create the desired ZIP file -->
		<zip basedir="${temp.directory}" destfile="${sp:output}/${package.name}${package.qualifier}.zip">
			<include name="${install.directory.name}/**" />
		</zip>

		<!-- cleanup -->
		<delete dir="${temp.directory}" />
	</target>

	<target name="-define.properties.for.models.packaging" depends="-define.properties.for.packaging">
		<!-- there are no model files in features so we don't need to install them to extract the model files -->
		<property name="install.features" value="false" />
	</target>

	<target name="package.models" depends="-define.properties.for.models.packaging,-install.ius,-define.package.qualifier">
		<!-- remove the p2 metadata, as they will never be used -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="artifacts.xml" />
		</delete>

		<property name="plugin.directory" location="${install.destination}/plugins" />
		<property name="target.directory" location="${temp.directory}/${top.directory}" />

		<property name="model.directory.name" value="model" />
		<property name="cache.directory.name" value="cache" />
		<property name="about.file.name" value="about.html" />

		<delete dir="${target.directory}" />

		<!--
			create a single directory corresponding to every bundle found in the plugins
			subdirectory of the previous install operation destination
			(handle both - the directory based and the jar based plugins)
		-->
		<touch mkdirs="true" verbose="false">
			<fileset dir="${plugin.directory}">
				<depth max="0" />
				<type type="file" />
				<filename name="*.jar" />
			</fileset>
			<globmapper from="*.jar" to="${target.directory}/*/.stamp" />
		</touch>
		<touch mkdirs="true" verbose="false">
			<fileset dir="${plugin.directory}">
				<depth max="0" />
				<type type="dir" />
			</fileset>
			<globmapper from="*" to="${target.directory}/*/.stamp" />
		</touch>

		<!--
			now call the "-extract.model.files" target for every directory created
			in the previous step
		-->
		<subant genericantfile="${ant.file}" target="-extract.model.files" inheritall="true">
			<dirset dir="${target.directory}">
				<include name="*/**" />
			</dirset>
		</subant>

		<!--
			delete any files other than those we want to keep, and delete also
			directories which become empty as a result of that action
		-->
		<delete dir="${target.directory}" includeemptydirs="true">
			<filename name="**/*" />
			<none>
				<and>
					<!--
						delete also the about files if not accompanied
						by either model or cache directories
					-->
					<filename name="*/${about.file.name}" />
					<or>
						<present targetdir="${target.directory}">
							<mapper>
								<globmapper from="*${about.file.name}" to="*${model.directory.name}" />
							</mapper>
						</present>
						<present targetdir="${target.directory}">
							<mapper>
								<globmapper from="*${about.file.name}" to="*${cache.directory.name}" />
							</mapper>
						</present>
					</or>
				</and>
				<filename name="*/${model.directory.name}/**" />
				<filename name="*/${cache.directory.name}/**" />
			</none>
		</delete>

		<!-- create the desired ZIP file -->
		<zip basedir="${temp.directory}" destfile="${sp:output}/${package.name}${package.qualifier}.zip">
			<include name="${top.directory}/**" />
		</zip>

		<!-- cleanup -->
		<delete dir="${temp.directory}" />
	</target>

	<target name="-extract.model.files">
		<pathconvert property="plugin.location.stem">
			<path location="${basedir}" />
			<map from="${target.directory}" to="${plugin.directory}" />
		</pathconvert>
		<property name="plugin.location" value="${plugin.location.stem}.jar" />

		<patternset id="model.files">
			<include name="${about.file.name}" />
			<include name="${model.directory.name}/**" />
			<include name="${cache.directory.name}/**" />
		</patternset>

		<!-- define a resource set for a jar file based plugin -->
		<zipfileset id="zip.resource.set" src="${plugin.location}">
			<patternset refid="model.files" />
		</zipfileset>

		<!-- define a resource set for a directory based plugin -->
		<fileset id="file.resource.set" dir="${plugin.location.stem}">
			<patternset refid="model.files" />
		</fileset>

		<!-- decide which resource set to use -->
		<condition property="resource.set" value="zip.resource.set" else="file.resource.set">
			<available file="${plugin.location}" type="file" />
		</condition>

		<!-- now copy the selected resources -->
		<copy todir="${basedir}">
			<resources refid="${resource.set}" />
		</copy>
	</target>
</project>
